/* 散列函数的作用就是给定一个键值，然后返回值在表中的地址。
  * 二分法查找的时间复杂度，最多K次找到， N/2 n/2/2 ....... n/2^k  k = log(n)
  * 这就是散列！ 通过给定的学号，去访问一种转换算法（将学号010121转换为1年级，1 班，21号的方法），得到对应的学生所在地址（1年级，1 班，21号）。
  * 其中这种转换算法称为散列函数（哈希函数、Hash 函数），给定的 key 称为关键字，关键字通过散列函数计算出来的值则称为散列值（哈希值、Hash 值）。通过散列值到**散列表（哈希表、Hash 表）**中就可以获取检索值。
*/

// 如何设计散列函数 在不牺牲空间的情况下
// 易于计算：它应该易于计算，并且不能成为算法本身。
// 统一分布：它应该在哈希表中提供统一分布，不应导致群集。
// 较少的冲突：当元素对映射到相同的哈希值时发生冲突。应该避免这些。


// 常用的解决冲突的fangf 
/* 开放地址法
* 链式地址法
* 再哈希法
* 建立一个公共的溢出区
*/


// 线性寻址法，通过hansh函数计算得到的地址，如果地址中有值，就地址+1
/* 链式地址法， 就像在学生个人信息和学生学号的关联上，可以将学好不同的部分通过hash函数处理放入同一个地址中得到链表里面去
* 链表查找的时间复杂度也不高的（再复习一下）
* 插入：像对应的链表中插入一条数据，时间复杂度为 O(1)
* 查找或删除：从链头开始，查找、删除的时间复杂度为 O(k)，k为链表的长度
*/

// 如果冲突太多，需要对散列表进行动态扩容
